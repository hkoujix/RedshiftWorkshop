# File          : vpc.yml
# Purpose       : To create Amazon VPC resources.
# Author        : Takeshi Nakatani (AWS)
# Last Updated  : 2018-10-5
#
# -- Note --
# Run this template first of all.
# Then, run other dependant templates using cross-stack-referene.
#

AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Common Parameters
        Parameters:
          - EnvType
          - ProjectName
          - DataS3BucketName
      - Label:
          default: VPC Configuration
        Parameters:
          - VPCName
          - VPCCidr
          - PublicSubnetCidr1
          - PublicSubnetCidr2
      - Label:
          default: Redshift
        Parameters:
          - ClusterType
          - NumberOfNodes
          - NodeType
          - DatabaseName
          - MasterUserName
          - CommonPassword
      - Label:
          default: SageMaker
        Parameters:
          - SageMakerInstanceType
          - SageMakerS3Bucket
    ParameterLabels:
      EnvType:
        default: Environment Type
      ProjectName:
        default: Project Name
      DataS3BucketName:
        default: Data S3 Bucket Name 
      VPCName:
        default: VPC Name
      VPCCidr:
        default: VPC CIDR Range
      PublicSubnetCidr1:
        default: Public Subet1 CIDR Range
      PublicSubnetCidr2:
        default: Public Subet2 CIDR Range
      CommonPassword:
        default: Common Password
      ClusterType:
        default: Type of Redshift Cluster
      MumberOfNodes:
        default: Number of Nodes
      NodeType:
        default: Node Type
      DatabaseName:
        default: DB Name
      MasterUserName:
        default: DB User Name
      SageMakerInstanceType:
        default: Type of Notebook Instance
      SageMakerS3Bucket:
        default: Bucket Name for SageMaker

Parameters:
  EnvType:
    Description: Environment type. (Prod, Dev)
    Type: String
    Default: Dev
    AllowedValues:
    - Prod
    - Dev
  ProjectName:
    Description: Name of the project.
    Type: String
    Default: ws1
    AllowedPattern: '([a-zA-Z0-9])+'
  VPCName:
    Description: Name of the VPC.
    Type: String
    Default: myvpc
    AllowedPattern: '([a-zA-Z0-9])+'
  VPCCidr:
    Description: CIDR block for the VPC.
    Type: String
    Default: 172.16.0.0/16
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PublicSubnetCidr1:
    Description: CIDR block for Public Subnet 1.
    Type: String
    Default: 172.16.40.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PublicSubnetCidr2:
    Description: CIDR block for Public Subnet 2.
    Type: String
    Default: 172.16.41.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'

  DataS3BucketName:
    Description: Name of Data Bucket
    Type: String
    Default: workshopdata

  CommonPassword:
    Description: Password for MAD, RS etc. Must be set.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: "[a-zA-Z0-9#!.@+-=|^]*"
    NoEcho: true
  ClusterType:
    Description: Type of the Redshift cluster.
    Type: String
    Default: single-node
    AllowedValues:
    - single-node
    - multi-node
  NumberOfNodes:
    Description: Number of compute nodes in the cluster. For multi-node clusters,
      the NumberOfNodes parameter must be greater than 1.
    Type: Number
    Default: '1'
  NodeType:
    Description: Type of node to be provisioned.
    Type: String
    Default: ds2.xlarge
    AllowedValues:
    - ds2.xlarge
    - ds2.8xlarge
    - dc2.large
    - dc2.8xlarge
    - dc1.large
    - dc1.8xlarge
  DatabaseName:
    Description: Name of the first database to be created when the cluster is created.
    Type: String
    Default: mydb
    AllowedPattern: ([a-z]|[0-9])+
  MasterUserName:
    Description: User name that is associated with the master user account for the
      Redshift cluster that is being created.
    Type: String
    Default: awsuser
    AllowedPattern: ([a-z]|[0-9])+

  SageMakerInstanceType:
    Description: 'The type of SageMaker notebook to be provisioned. '
    Type: String
    Default: ml.t3.xlarge
    AllowedValues:
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.xlarge
      - ml.t3.2xlarge
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
  SageMakerS3Bucket:
    Description: <Optional> Name of a pre-existing bucket that SageMaker will be granted full access
    Type: String
    Default: ''

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public1:
      CIDR: "10.0.1.0/24"
    Public2:
      CIDR: "10.0.3.0/24"

  AZRegions:
    ap-northeast-1:
      AZs: ["a", "c"]

Conditions:
  ProdEnv: !Equals [!Ref EnvType, Prod]
  DevEnv: !Equals [!Ref EnvType, Dev]
  IsMultiNodeCluster: !Equals 
    - !Ref ClusterType
    - multi-node

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Public01

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public2"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Public02

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-GW

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Public

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet2"
      RouteTableId:
        Ref: "PublicRouteTable"


  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"


  SecurityGroupPublic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for public subnet.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value:
           !Sub ${AWS::StackName}-LandingSG


  S3EndPoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VPC


  RedshiftClusterSubnetGroup:
    Type: 'AWS::Redshift::ClusterSubnetGroup'
    Properties:
      Description: Public subnet group for the Redshift cluster.
      SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
  RedshiftClusterParameterGroup:
    Type: 'AWS::Redshift::ClusterParameterGroup'
    Properties:
      Description: Cluster parameter group for the Redshift cluster.
      ParameterGroupFamily: redshift-1.0
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: 'true'
  RedshiftRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: RedshiftandSpectrumCustomizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'athena:*'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'glue:CreateDatabase'
                  - 'glue:DeleteDatabase'
                  - 'glue:GetDatabase'
                  - 'glue:GetDatabases'
                  - 'glue:UpdateDatabase'
                  - 'glue:CreateTable'
                  - 'glue:DeleteTable'
                  - 'glue:BatchDeleteTable'
                  - 'glue:UpdateTable'
                  - 'glue:GetTable'
                  - 'glue:GetTables'
                  - 'glue:BatchCreatePartition'
                  - 'glue:CreatePartition'
                  - 'glue:DeletePartition'
                  - 'glue:BatchDeletePartition'
                  - 'glue:UpdatePartition'
                  - 'glue:GetPartition'
                  - 'glue:GetPartitions'
                  - 'glue:BatchGetPartition'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:ListMultipartUploadParts'
                  - 's3:AbortMultipartUpload'
                  - 's3:CreateBucket'
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - '*'
  RedshiftCluster:
    Type: 'AWS::Redshift::Cluster'
    DependsOn:
      - RedshiftClusterSubnetGroup
      - RedshiftClusterParameterGroup
    Properties:
      ClusterType: !Ref ClusterType
      NumberOfNodes: !If 
        - IsMultiNodeCluster
        - !Ref NumberOfNodes
        - !Ref 'AWS::NoValue'
      NodeType: !Ref NodeType
      DBName: !Ref DatabaseName
      MasterUsername: !Ref MasterUserName
      MasterUserPassword: !Ref CommonPassword
      ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup
      VpcSecurityGroupIds:
          - !Ref SecurityGroupPublic
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      IamRoles:
        - !GetAtt 
          - RedshiftRole
          - Arn
      PubliclyAccessible: 'true'

  NotebookInstance:
    Type: 'AWS::SageMaker::NotebookInstance'
    Properties:
      InstanceType: !Ref SageMakerInstanceType
      NotebookInstanceName: !Sub ${AWS::StackName}-NotebookInstance
      RoleArn: !GetAtt NotebookExecutionRole.Arn
      DirectInternetAccess: Enabled
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroupPublic
      RootAccess: Enabled

  NotebookExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-AmazonSageMaker-ExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonElasticMapReduceReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess"
        - "arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess"
      Path: "/service-role/"

  DataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::AccountId}-${DataS3BucketName}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True



Outputs:
  VpcId:
    Description: ID of the VPC.
    Value: !Ref VPC
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "vpcid"]]
  PublicSubnet1Id:
    Description: ID of the public subnet1.
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "publicsubnet1id"]]
  PublicSubnet2Id:
    Description: ID of the public subnet2.
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "publicsubnet2id"]]
  SecurityGroupPublicId:
    Description: ID of the public security group.
    Value: !Ref SecurityGroupPublic
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "securitygrouppublicid"]]

  RedshiftClusterName:
    Description: Name of the Redshift cluster.
    Value: !Ref RedshiftCluster
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "redshiftclustername"]]
  RedshiftClusterEndpoint:
    Description: Redshift cluster endpoint.
    Value: !Join 
      - ':'
      - - !GetAtt 
          - RedshiftCluster
          - Endpoint.Address
        - !GetAtt 
          - RedshiftCluster
          - Endpoint.Port
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "redshiftclusterendpoint"]]
  RedshiftClusterRole:
    Description: Amazon Resource Name (ARN) of the role for the Redshift cluster.
    Value: !GetAtt 
      - RedshiftRole
      - Arn
    Export:
      Name: !Join [ "-", [ "Ref":"EnvType", "Ref":"ProjectName", "redshiftrolearn"]]

  NotebookInstanceID:
    Value: !Ref NotebookInstance

  DataS3BucketName:
    Value: !Ref DataS3Bucket